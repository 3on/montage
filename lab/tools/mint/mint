#!/usr/bin/env node
/* <copyright>
 This file contains proprietary software owned by Motorola Mobility, Inc.<br/>
 No rights, expressed or implied, whatsoever to this software are provided by Motorola Mobility, Inc. hereunder.<br/>
 (c) Copyright 2012 Motorola Mobility, Inc.  All Rights Reserved.
 </copyright> */
/*jshint node:true */

var fs = require("fs"),
    path = require("path"),
    JSHINT = require("jshint").JSHINT;
var linters = require("./linters"),
    linterNames = Object.keys(linters);


var run = exports.run = function(filenames) {
    var problems = {};

    for (var i = 0, len = filenames.length; i < len; i++) {
        var filename = filenames[i],
            filePath = path.resolve(filename);

        if (!path.existsSync(filename)) {
            console.error("Error: '" + filename + "' does not exist. Skipping.");
            continue;
        }

        problems[filename] = lint(filePath, fs.readFileSync(filePath, "utf8"));
    }

    return problems;
};

var lint = exports.lint = function(filePath, source) {
    JSHINT(source, {browser: true, node: true, trailing: true, strict: false});
    var jshint = JSHINT.data();
    // todo esprima

    var fileProblems = [];

    for (var i = 0, len = linterNames.length; i < len; i++) {
        var linter = linterNames[i];
        var linterProblems = linters[linter](filePath, source, jshint);
        if (linterProblems) {
            fileProblems = fileProblems.concat(linters[linter](filePath, source, jshint));
        }
    }
    return fileProblems;
};

function usage() {
    console.log("Usage: mint [--solution] filenames...");
    console.log();
    console.log("mint checks Montage Javascript files for coding errors.");
    console.log();
    console.log("\t--solution\tshow solutions along with problems");
}

if (!module.parent) {
    // this is the main module
    var args = process.argv.slice(2),
        solution = false;

    if (args.length === 0) {
        usage();
        process.exit();
    }
    if (args[0] === "--solution") {
        solution = true;
        args.shift();
    }

    var colors = require("./lib/termcolors").colors;
    var codeRe = /`([^`]+)`/g;

    var problems = run(args);
    for (var filename in problems) {
        for (var i = 0, len = problems[filename].length; i < len; i++) {
            var p = problems[filename][i];
            console.log(colors.brown(filename + ":" + p.line, true) + " " + p.problem);
            if (solution) {

                console.log(colors.green("> ", true) + p.solution.replace(codeRe, "`" + colors.dgray("$1", true) + "`" ));
            }
        }
    }
}